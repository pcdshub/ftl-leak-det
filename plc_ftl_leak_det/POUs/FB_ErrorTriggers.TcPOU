<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_ErrorTriggers" Id="{03ec90dc-8712-481d-8a9d-9ad9d4cb604c}" SpecialFunc="None">
    <Declaration><![CDATA[// Detects rising-edge errors
FUNCTION_BLOCK FB_ErrorTriggers
VAR_IN_OUT CONSTANT
    stErrors : ST_ErrorStates; // Errors that have been detected
END_VAR
VAR_OUTPUT
    stNewErrors : ST_ErrorStates; // Rising-edge errors
END_VAR
VAR
    // R_TRIG function blocks for detecting new errors
    fbLeakTrig : R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbLeakTrig(
    CLK := stErrors.bLeakDetected,
    Q => stNewErrors.bLeakDetected
);]]></ST>
    </Implementation>
    <Method Name="NewLeakError" Id="{ab5031be-34d4-41d7-8f1c-1e6706b02485}">
      <Declaration><![CDATA[// Returns whether a rising-edge leak error has occured
METHOD NewLeakError : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[NewLeakError := fbLeakTrig.Q;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetLeakTriggers" Id="{0cf9305f-aad5-4ef8-8c4c-82a427ee3c88}">
      <Declaration><![CDATA[// Reset latched leak errors
METHOD ResetLeakTriggers
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbLeakTrig(
    CLK := FALSE,
    Q => stNewErrors.bLeakDetected
);

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>